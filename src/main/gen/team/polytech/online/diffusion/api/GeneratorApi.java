/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package team.polytech.online.diffusion.api;

import team.polytech.online.diffusion.model.Image;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-26T19:29:34.490799171+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Generator", description = "Методы, связанные с генерацией изображений")
public interface GeneratorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/generator : Получаем список моделей для генератора
     * 
     *
     * @return все хорошо присылаются модели (status code 200)
     */
    @Operation(
        operationId = "getGenerator",
        summary = "Получаем список моделей для генератора",
        description = "",
        tags = { "Generator" },
        responses = {
            @ApiResponse(responseCode = "200", description = "все хорошо присылаются модели", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/generator",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getGenerator(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/generator : Начинаем генерацию изображения
     * 
     *
     * @param prompt prompt для создания фото (required)
     * @param antiPrompt anti-prompt для создания фото (required)
     * @param modelName Название модели, которая будет использоваться для генерации (required)
     * @param seed Seed для генерации нейросети. Оставить пустым для случайного (optional)
     * @return отправлено на генерацию (status code 202)
     *         or если не заполнены prompt, anti-prompt или model_name (status code 400)
     */
    @Operation(
        operationId = "postGenerator",
        summary = "Начинаем генерацию изображения",
        description = "",
        tags = { "Generator" },
        responses = {
            @ApiResponse(responseCode = "202", description = "отправлено на генерацию", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "если не заполнены prompt, anti-prompt или model_name")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/generator",
        produces = { "application/json" }
    )
    default ResponseEntity<String> postGenerator(
        @NotNull @Parameter(name = "prompt", description = "prompt для создания фото", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "prompt", required = true) String prompt,
        @NotNull @Parameter(name = "anti-prompt", description = "anti-prompt для создания фото", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "anti-prompt", required = true) String antiPrompt,
        @NotNull @Parameter(name = "modelName", description = "Название модели, которая будет использоваться для генерации", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "modelName", required = true) String modelName,
        @Parameter(name = "seed", description = "Seed для генерации нейросети. Оставить пустым для случайного", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seed", required = false) Optional<Long> seed
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * TRACE /api/v1/generator : Получаем сделанное изображение в цикле
     * 
     *
     * @param generationToken Токен, по которому можно узнать об статусе генерируемого изображения (required)
     * @return нейронная сеть успешно сгенерировала изображение и в присланном Image будет ссылка на него (status code 201)
     *         or генерация изображения продолжается и еще не была завершена, но и не сломалась (status code 202)
     *         or такого generation_token нет на сервере в принципе (status code 404)
     *         or во время генерации изображения случилась ошибка и оно было потеряно безвозвратно :( (status code 500)
     */
    @Operation(
        operationId = "traceGenerator",
        summary = "Получаем сделанное изображение в цикле",
        description = "",
        tags = { "Generator" },
        responses = {
            @ApiResponse(responseCode = "201", description = "нейронная сеть успешно сгенерировала изображение и в присланном Image будет ссылка на него", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "202", description = "генерация изображения продолжается и еще не была завершена, но и не сломалась"),
            @ApiResponse(responseCode = "404", description = "такого generation_token нет на сервере в принципе"),
            @ApiResponse(responseCode = "500", description = "во время генерации изображения случилась ошибка и оно было потеряно безвозвратно :(")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.TRACE,
        value = "/api/v1/generator",
        produces = { "application/json" }
    )
    default ResponseEntity<Image> traceGenerator(
        @NotNull @Parameter(name = "generationToken", description = "Токен, по которому можно узнать об статусе генерируемого изображения", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "generationToken", required = true) String generationToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seed\" : \"seed\", \"authorName\" : \"authorName\", \"authorAvatarUrl\" : \"authorAvatarUrl\", \"photoId\" : 0.8008281904610115, \"anti-prompt\" : \"anti-prompt\", \"model\" : \"model\", \"prompt\" : \"prompt\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
