/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package team.polytech.online.diffusion.api;

import team.polytech.online.diffusion.model.Image;
import team.polytech.online.diffusion.model.PostPagingWrapper;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-26T19:29:34.490799171+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Images", description = "Методы, связанные с работой с уже созданными изображениями")
public interface ImagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/feed : Получение списка постов
     * 
     *
     * @param marker Маркер, показывающий начиная с какого id подгружать ресурсы (optional)
     * @return все хорошо, присланы посты (status code 200)
     *         or такой маркер не найден (status code 404)
     */
    @Operation(
        operationId = "feed",
        summary = "Получение списка постов",
        description = "",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "все хорошо, присланы посты", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPagingWrapper.class))
            }),
            @ApiResponse(responseCode = "404", description = "такой маркер не найден")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/feed",
        produces = { "application/json" }
    )
    default ResponseEntity<PostPagingWrapper> feed(
        @Parameter(name = "marker", description = "Маркер, показывающий начиная с какого id подгружать ресурсы", in = ParameterIn.QUERY) @Valid @RequestParam(value = "marker", required = false) Optional<Long> marker
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextMarker\" : 0.8008281904610115, \"posts\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/images/{photoId} : Получение полной информации про картинку
     * 
     *
     * @param photoId ID фото в базе данных (required)
     * @return токен активирован и новый пароль успешно принят (status code 200)
     *         or такой токен есть, однако он еще не был активирован присыланием правильного кода в методе Confirm_Password_Code (status code 400)
     *         or такого recovery_token нет на сервере в принципе (status code 404)
     */
    @Operation(
        operationId = "getImage",
        summary = "Получение полной информации про картинку",
        description = "",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "токен активирован и новый пароль успешно принят", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "400", description = "такой токен есть, однако он еще не был активирован присыланием правильного кода в методе Confirm_Password_Code"),
            @ApiResponse(responseCode = "404", description = "такого recovery_token нет на сервере в принципе")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/images/{photoId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Image> getImage(
        @Parameter(name = "photoId", description = "ID фото в базе данных", required = true, in = ParameterIn.PATH) @PathVariable("photoId") Long photoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seed\" : \"seed\", \"authorName\" : \"authorName\", \"authorAvatarUrl\" : \"authorAvatarUrl\", \"photoId\" : 0.8008281904610115, \"anti-prompt\" : \"anti-prompt\", \"model\" : \"model\", \"prompt\" : \"prompt\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/images/make-avatar : Ставим изображение пользователю на аватарку
     * 
     *
     * @param targetPhotoId ID фото в базе данных (required)
     * @return изображение было успешно поставлено на автарку (status code 200)
     *         or такого photo_id нет на сервере в принципе (status code 404)
     */
    @Operation(
        operationId = "makeAvatar",
        summary = "Ставим изображение пользователю на аватарку",
        description = "",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "изображение было успешно поставлено на автарку"),
            @ApiResponse(responseCode = "404", description = "такого photo_id нет на сервере в принципе")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/images/make-avatar"
    )
    default ResponseEntity<Void> makeAvatar(
        @NotNull @Parameter(name = "targetPhotoId", description = "ID фото в базе данных", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "targetPhotoId", required = true) Long targetPhotoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/images/{photoId} : Публикуем изображение
     * 
     *
     * @param photoId ID фото в базе данных (required)
     * @return изображение было успешно опубликовано (status code 201)
     *         or такого photo_id нет на сервере в принципе (status code 400)
     *         or данное photo_id не может быть опубликовано пользователем, так как это не его фотография или эта фотография уже была опубликована (status code 404)
     */
    @Operation(
        operationId = "postImage",
        summary = "Публикуем изображение",
        description = "",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "201", description = "изображение было успешно опубликовано"),
            @ApiResponse(responseCode = "400", description = "такого photo_id нет на сервере в принципе"),
            @ApiResponse(responseCode = "404", description = "данное photo_id не может быть опубликовано пользователем, так как это не его фотография или эта фотография уже была опубликована")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/images/{photoId}"
    )
    default ResponseEntity<Void> postImage(
        @Parameter(name = "photoId", description = "ID фото в базе данных", required = true, in = ParameterIn.PATH) @PathVariable("photoId") Long photoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/images/{photoId} : Сохраняем в галерею
     * 
     *
     * @param photoId ID фото в базе данных (required)
     * @return изображение было успешно сохранено в галерею (status code 200)
     *         or такого photo_id нет на сервере в принципе (status code 404)
     *         or данное photo_id не может быть добавлено в галерею пользователем, так как это не его фотография или эта фотография уже есть у него в галерее (status code 409)
     */
    @Operation(
        operationId = "putImage",
        summary = "Сохраняем в галерею",
        description = "",
        tags = { "Images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "изображение было успешно сохранено в галерею"),
            @ApiResponse(responseCode = "404", description = "такого photo_id нет на сервере в принципе"),
            @ApiResponse(responseCode = "409", description = "данное photo_id не может быть добавлено в галерею пользователем, так как это не его фотография или эта фотография уже есть у него в галерее")
        },
        security = {
            @SecurityRequirement(name = "JWTAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/images/{photoId}"
    )
    default ResponseEntity<Void> putImage(
        @Parameter(name = "photoId", description = "ID фото в базе данных", required = true, in = ParameterIn.PATH) @PathVariable("photoId") Long photoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
